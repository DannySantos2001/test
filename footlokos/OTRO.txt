<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Issue Tracker - Windows 11 Style</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <div class="form-container">
            <h1>Issue Tracker</h1>
            
            <div class="form-grid">
                <div class="input-group">
                    <label for="storeNumber">Número de tienda:</label>
                    <input type="text" id="storeNumber" value="*" placeholder="Enter store number">
                </div>

                <div class="input-group">
                    <label for="name">Name:</label>
                    <input type="text" id="name" placeholder="Enter your name">
                </div>

                <div class="input-group">
                    <label for="employeeId">Employee ID:</label>
                    <input type="text" id="employeeId" placeholder="Enter your employee ID">
                </div>
            </div>

            <div class="input-group">
                <label for="phone">Phone:</label>
                <input type="tel" id="phone" placeholder="Enter your phone number">
            </div>

            <div class="input-group">
                <label for="issue">Issue (Spanish):</label>
                <textarea id="issue" placeholder="Describe el problema"></textarea>
            </div>

            <div class="button-group">
                <button id="clearBtn" class="secondary">Clear Form</button>
            </div>

            <div class="common-issues">
                <h3>Common Solutions:</h3>
                <div class="solutions-container">
                    <div class="solution-buttons">
                        <button class="solution-btn" data-solution="1. Reiniciar el equipo:
- Guardar todos los documentos abiertos
- Cerrar todos los programas
- Hacer clic en Inicio > Energía > Reiniciar
- Esperar a que el equipo se reinicie completamente
- Verificar si el problema persiste">+ Reiniciar equipo</button>

                        <button class="solution-btn" data-solution="2. Limpiar caché del navegador:
- Abrir el navegador
- Presionar Ctrl + Shift + Delete
- Seleccionar 'Todo el tiempo' en el rango
- Marcar 'Caché' e 'Imágenes y archivos'
- Hacer clic en 'Limpiar datos'">+ Limpiar caché del navegador</button>

                        <button class="solution-btn" data-solution="3. Verificar conexión de red:
- Comprobar cable de red está conectado
- Verificar indicador de WiFi está activo
- Realizar prueba de ping a google.com
- Reiniciar router si es necesario
- Contactar IT si persiste el problema">+ Verificar conexión de red</button>

                        <button class="solution-btn" data-solution="4. Actualizar Windows:
- Abrir Configuración > Windows Update
- Hacer clic en 'Buscar actualizaciones'
- Instalar todas las actualizaciones pendientes
- Reiniciar el equipo cuando se solicite">+ Actualizar Windows</button>

                        <button class="solution-btn" data-solution="5. Liberar espacio en disco:
- Abrir 'Limpieza de disco'
- Seleccionar unidad C:
- Marcar todas las casillas
- Hacer clic en 'Aceptar'
- Eliminar archivos temporales">+ Liberar espacio en disco</button>
                    </div>
                </div>
            </div>
        </div>

        <div class="output-container">
            <div class="output-group">
                <h3>Complete Report</h3>
                <div class="output-box">
                    <div class="output-box-header">
                        <button class="copy-btn" data-target="completeOutput">
                            <span class="copy-text">Copy</span>
                        </button>
                    </div>
                    <div id="completeOutput"></div>
                </div>
            </div>

            <div class="output-group">
                <h3>Issue Only (English)</h3>
                <div class="output-box">
                    <div class="output-box-header">
                        <button class="copy-btn" data-target="issueOutput">
                            <span class="copy-text">Copy</span>
                        </button>
                    </div>
                    <div id="issueOutput"></div>
                </div>
            </div>

            <div class="output-group">
                <h3>Selected Solutions</h3>
                <div class="output-box">
                    <div class="output-box-header">
                        <button class="copy-btn" data-target="commonIssuesOutput">
                            <span class="copy-text">Copy</span>
                        </button>
                    </div>
                    <div id="commonIssuesOutput"></div>
                </div>
            </div>
        </div>
    </div>
    <script src="script.js"></script>
</body>
</html>


CSS--------------------------------
:root {
    --bg-primary: #1f1f1f;
    --bg-secondary: #2d2d2d;
    --text-primary: #ffffff;
    --text-secondary: #cccccc;
    --accent: #0078d4;
    --border: #404040;
    --input-bg: #3c3c3c;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', sans-serif;
}

body {
    background-color: var(--bg-primary);
    color: var(--text-primary);
    line-height: 1.6;
    padding: 1rem;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
}

.form-container, .output-container {
    background-color: var(--bg-secondary);
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.form-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    margin-bottom: 1rem;
}

h1 {
    margin-bottom: 1rem;
    font-size: 1.5rem;
    font-weight: 600;
}

h3 {
    margin-bottom: 0.4rem;
    color: var(--text-secondary);
    font-size: 1rem;
}

.input-group {
    margin-bottom: 1rem;
}

.form-grid .input-group {
    margin-bottom: 0;
}

label {
    display: block;
    margin-bottom: 0.25rem;
    color: var(--text-secondary);
    font-size: 0.9rem;
}

input[type="text"],
input[type="tel"],
textarea {
    width: 100%;
    padding: 0.5rem;
    background-color: var(--input-bg);
    border: 1px solid var(--border);
    border-radius: 4px;
    color: var(--text-primary);
    font-size: 0.9rem;
}

textarea {
    min-height: 80px;
    resize: vertical;
}

.solutions-container {
    margin-top: 0.5rem;
}

.solution-buttons {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 0.5rem;
}

.solution-btn {
    background-color: var(--input-bg);
    color: var(--text-primary);
    border: 1px solid var(--border);
    padding: 0.5rem;
    text-align: left;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.2s;
}

.solution-btn:hover {
    background-color: var(--accent);
    border-color: var(--accent);
}

.output-group {
    margin-bottom: 1.5rem;
    position: relative;
}

.output-box {
    background-color: var(--input-bg);
    border: 1px solid var(--border);
    border-radius: 4px;
    padding: 0.5rem;
    min-height: auto; /* Evita expansión innecesaria */
    margin-bottom: 0.75rem;
    white-space: pre-wrap;
    font-family: 'Consolas', monospace;
    font-size: 0.9rem;
    position: relative;
    display: flex;
    flex-direction: column;
}

.output-box-header {
    display: flex;
    justify-content: flex-end;
    padding: 0;
    top: 0;
    right: 0;
    left: 0;
    height: 32px;
    background-color: rgba(0, 120, 212, 0.9);
    display: flex;
    align-items: center;
    justify-content: flex-end;
    padding: 0 8px;
    border-radius: 4px 4px 0 0;
    opacity: 0;
    transition: opacity 0.2s;
}

.output-box:empty + .output-box-header {
    display: none;
}

.output-group:hover .output-box-header {
    opacity: 1;
}

.copy-btn {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    font-size: 0.9rem;
    padding: 4px 8px;
    display: flex;
    align-items: center;
    gap: 4px;
}

.copy-btn:hover {
    text-decoration: underline;
}

.secondary {
    background-color: #4c4c4c;
    color: var(--text-primary);
    padding: 0.5rem 1rem;
    border-radius: 4px;
}

.secondary:hover {
    background-color: #5c5c5c;
}

.button-group {
    display: flex;
    gap: 1rem;
    margin-top: 1rem;
}

@media (max-width: 768px) {
    .container {
        grid-template-columns: 1fr;
    }
    
    .form-grid {
        grid-template-columns: 1fr;
    }
    
    .solution-buttons {
        grid-template-columns: 1fr;
    }
}

JS---------------------------------------------
// Translation API function (using a free API)
async function translateText(text) {
    try {
        const response = await fetch(`https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=es|en`);
        const data = await response.json();
        return data.responseData.translatedText;
    } catch (error) {
        console.error('Translation error:', error);
        return text; // Return original text if translation fails
    }
}

// Form elements
const storeNumberInput = document.getElementById('storeNumber');
const nameInput = document.getElementById('name');
const employeeIdInput = document.getElementById('employeeId');
const phoneInput = document.getElementById('phone');
const issueInput = document.getElementById('issue');
const clearBtn = document.getElementById('clearBtn');
const solutionBtns = document.querySelectorAll('.solution-btn');
const copyBtns = document.querySelectorAll('.copy-btn');

// Output elements
const completeOutput = document.getElementById('completeOutput');
const issueOutput = document.getElementById('issueOutput');
const commonIssuesOutput = document.getElementById('commonIssuesOutput');

// Store selected solutions
let selectedSolutions = [];

// Update outputs when any input changes
async function updateOutputs() {
    const name = nameInput.value;
    const employeeId = employeeIdInput.value;
    const phone = phoneInput.value;
    const issue = issueInput.value;
    
    // Translate issue to English
    const translatedIssue = await translateText(issue);
    
    // Update complete output (excluding store number)
    const completeText = `Name: ${name}
Employee ID: ${employeeId}
Phone: ${phone}
Issue: ${translatedIssue}`;
    
    completeOutput.textContent = completeText;
    
    // Update issue-only output
    issueOutput.textContent = translatedIssue;
}

// Update common issues output
function updateCommonIssues() {
    commonIssuesOutput.textContent = selectedSolutions.join('\n\n');
}

// Event listeners for form inputs
[storeNumberInput, nameInput, employeeIdInput, phoneInput, issueInput].forEach(input => {
    input.addEventListener('input', updateOutputs);
});

// Event listeners for solution buttons
solutionBtns.forEach(btn => {
    btn.addEventListener('click', () => {
        const solution = btn.dataset.solution;
        selectedSolutions.push(solution);
        updateCommonIssues();
    });
});

clearBtn.addEventListener('click', () => {
    storeNumberInput.value = '*';
    nameInput.value = '';
    employeeIdInput.value = '';
    phoneInput.value = '';
    issueInput.value = '';
    selectedSolutions = [];
    completeOutput.textContent = '';
    issueOutput.textContent = '';
    commonIssuesOutput.textContent = '';
});

// Copy functions
function copyToClipboard(text) {
    navigator.clipboard.writeText(text).then(() => {
        // Show success message
        const btn = document.querySelector(`.copy-btn[data-target="${text.id}"]`);
        const copyText = btn.querySelector('.copy-text');
        copyText.textContent = 'Copied!';
        
        // Reset after 2 seconds
        setTimeout(() => {
            copyText.textContent = 'Copy';
        }, 2000);
    }).catch(err => {
        console.error('Failed to copy text:', err);
    });
}

// Event listeners for copy buttons
copyBtns.forEach(btn => {
    btn.addEventListener('click', () => {
        const targetId = btn.dataset.target;
        const targetElement = document.getElementById(targetId);
        copyToClipboard(targetElement);
    });
});

// Initialize store number with *
storeNumberInput.value = '*';